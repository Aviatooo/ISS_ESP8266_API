#include "SD.h"
#if defined(ESP32)
#include <WiFi.h>
#include <FirebaseESP32.h>
#elif defined(ESP8266)
#include <ESP8266WiFi.h>
#include <FirebaseESP8266.h>
#endif

#include <iostream>
#include <string>
#include <addons/TokenHelper.h>
#include <addons/RTDBHelper.h>
#define WIFI_SSID "JS_Net"
#define WIFI_PASSWORD ""
#define API_KEY ""
#define DATABASE_URL ""
#define USER_EMAIL "esp@esp32.ide"
#define USER_PASSWORD ""


#include <NTPClient.h>
#include <WiFiUdp.h>

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
unsigned long count = 0;

WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org");

void setup() 
{
  Serial.begin(115200);
  
  WiFi.begin(WIFI_SSID, WIFI_PASSWORD);
  Serial.print("Connecting to Wi-Fi");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(300);
  }
  Serial.println();
  Serial.print("Connected with IP: ");
  Serial.println(WiFi.localIP());
  Serial.println();

  Serial.printf("Firebase Client v%s\n\n", FIREBASE_CLIENT_VERSION);

  config.api_key = API_KEY;
  auth.user.email = USER_EMAIL;
  auth.user.password = USER_PASSWORD;
  config.database_url = DATABASE_URL;
  config.token_status_callback = tokenStatusCallback;  // see addons/TokenHelper.h

  Firebase.begin(&config, &auth);
  Firebase.reconnectWiFi(true);
  Firebase.setDoubleDigits(5);

  timeClient.begin();
  timeClient.setTimeOffset(10800);

  delay(2000);
}

void loop() {

  Serial_Printf("Entering Master Loop");
  String HomeVironasRearBalconyTemperature = "36";
  String HomeVironasRearBalconyHumidity =  "100";

  //get Time
    timeClient.update();
    time_t epochTime = timeClient.getEpochTime();
    String formattedTime = timeClient.getFormattedTime();
    struct tm *ptm = gmtime((time_t *)&epochTime);
    String currentDate = String(ptm->tm_mday) + "-" + String(ptm->tm_mon + 1) + "-" + String(ptm->tm_year + 1900);
  //get Time 

  Serial.println("");

  if (Firebase.ready() && (millis() - sendDataPrevMillis > 15000 || sendDataPrevMillis == 0)) 
  { 
    Serial_Printf("Firebase Ready, Sending Data\n");

    //Get refresh time from firebase ------------------------------------------------------------------------------------------------------------------------------------
      Firebase.getInt(fbdo, F("/Settings/RefreshTime")) ? String(fbdo.to<int>()).c_str() : fbdo.errorReason().c_str();
      int refreshTime = 0;
      Firebase.getInt(fbdo, F("/Settings/RefreshTime"), &refreshTime) ? String(refreshTime).c_str() : fbdo.errorReason().c_str();
    //Get refresh time from firebase ------------------------------------------------------------------------------------------------------------------------------------

    //Get measurement time from firebase ------------------------------------------------------------------------------------------------------------------------------------
      Firebase.getInt(fbdo, F("/Settings/MeasurementTime")) ? String(fbdo.to<int>()).c_str() : fbdo.errorReason().c_str();
      int measurementTime = 0;
      Firebase.getInt(fbdo, F("/Settings/MeasurementTime"), &measurementTime) ? String(measurementTime).c_str() : fbdo.errorReason().c_str();
      Serial_Printf("measure rate = %d\n", measurementTime);
    //Get measurement time from firebase ------------------------------------------------------------------------------------------------------------------------------------

    sendDataPrevMillis = millis();    
    Firebase.setString(fbdo, F("Modules/HomeVironasRearBalcony/Date"), currentDate) ? "ok" : fbdo.errorReason().c_str();
    Firebase.setString(fbdo, F("Modules/HomeVironasRearBalcony/Time"), formattedTime) ? "ok" : fbdo.errorReason().c_str();
    Firebase.setString(fbdo, F("Modules/HomeVironasRearBalcony/Temperature"), HomeVironasRearBalconyTemperature) ? "ok" : fbdo.errorReason().c_str();
    Firebase.setString(fbdo, F("Modules/HomeVironasRearBalcony/Humidity"), HomeVironasRearBalconyHumidity) ? "ok" : fbdo.errorReason().c_str();
    
    Serial_Printf("Data Sent, delay %dsecs\n", refreshTime);    
    delay(refreshTime*1000);
  }else{
    Serial_Printf("Firebase Not Ready, delay 30secs\n");
    delay(30000);
  }
}
